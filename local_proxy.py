import socket
import threading
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib3
urllib3.disable_warnings() 


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_URL = "http://localhost:5000" 
PROXY_HOST = "127.0.0.1"
PROXY_PORT = 8080
# ================


def send_raw_response(handler, raw_response):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—ã—Ä–æ–π HTTP-–æ—Ç–≤–µ—Ç (b'HTTP/1.1 200 OK\\r\\n...') 
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –±—Ä–∞—É–∑–µ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–ª–æ ‚Äî –∫–∞–∫ —Ç–µ–ª–æ.
    """
    if b"\r\n\r\n" in raw_response:
        headers_raw, body = raw_response.split(b"\r\n\r\n", 1)
    else:
        headers_raw, body = raw_response, b""

    headers_lines = headers_raw.split(b"\r\n")
    if not headers_lines:
        handler.send_response(502)
        handler.end_headers()
        handler.wfile.write(b"Invalid response")
        return

    # –°—Ç–∞—Ç—É—Å-—Å—Ç—Ä–æ–∫–∞: "HTTP/1.1 200 OK"
    status_line = headers_lines[0].decode("utf-8", errors="ignore")
    if "200" in status_line:
        status_code = 200
    elif "404" in status_line:
        status_code = 404
    elif "500" in status_line:
        status_code = 500
    elif "301" in status_line or "302" in status_line:
        status_code = 302  # —Ä–µ–¥–∏—Ä–µ–∫—Ç
    else:
        status_code = 200

    handler.send_response(status_code)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for line in headers_lines[1:]:
        if b":" in line:
            try:
                key, value = line.split(b":", 1)
                handler.send_header(
                    key.decode("utf-8").strip(),
                    value.decode("utf-8").strip()
                )
            except:
                pass  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∏–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

    handler.end_headers()

    # –¢–æ–ª—å–∫–æ —Ç–µ–ª–æ
    handler.wfile.write(body)


class ProxyHandler(BaseHTTPRequestHandler):
    def tunnel_browser_to_api(self, client_sock, session_id):
        """–ß–∏—Ç–∞–µ—Ç –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ API —á–µ—Ä–µ–∑ /send"""
        while True:
            try:
                data = client_sock.recv(4096)
                if not data:
                     break
                requests.post(f"{API_URL}/session/{session_id}/send", data=data)
            except:
                break

    def tunnel_api_to_browser(self, client_sock, session_id):
        """–û–ø—Ä–∞—à–∏–≤–∞–µ—Ç /recv ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É"""
        while True:  
            try:
                resp = requests.get(f"{API_URL}/session/{session_id}/recv")
                if resp.status_code == 200 and resp.content:
                    client_sock.send(resp.content)
                elif resp.status_code == 204:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–¥–æ–∂–¥—ë–º
                    time.sleep(0.1)
                else:
                    break
            except:
                break

    def do_GET(self):
        # 1. –ü–∞—Ä—Å–∏–º URL
        from urllib.parse import urlparse
        url = urlparse(self.path)
        if not url.hostname:
            self.send_response(400)
            self.end_headers()
            self.wfile.write(b"Bad URL")
            return

        host = url.hostname
        port = url.port or 80
        path = url.path or "/"
        if not path.startswith("/"):
            path = "/" + path

        print(f"üéØ GET: {host}:{port} {path}")

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-–∑–∞–ø—Ä–æ—Å
        request = f"GET {path} HTTP/1.1\r\n"
        request += f"Host: {host}\r\n"
        request += "Connection: close\r\n"
        request += "User-Agent: TinyProxy\r\n"
        request += "\r\n"
        request_bytes = request.encode("utf-8")

        # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
        try:
            open_resp = requests.post(f"{API_URL}/session/open", json={"host": host, "port": port})
            if open_resp.status_code != 200:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏:", open_resp.text)
                self.send_response(502)
                self.end_headers()
                self.wfile.write(b"Failed to open session")
                return	

            session_id = open_resp.json()["session_id"]
            print(f"‚úÖ –°–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {session_id}")	

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            send_resp = requests.post(f"{API_URL}/session/{session_id}/send", data=request_bytes)
            if send_resp.status_code != 200:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", send_resp.text)
                self.send_response(502)
                self.end_headers()
                self.wfile.write(b"Send failed")
                return

            print("üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

	        # 5. –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫—É—Å–∫–∞–º–∏
            full_response = b""
            while True:
                recv_resp = requests.get(f"{API_URL}/session/{session_id}/recv")
                if recv_resp.status_code == 200 and recv_resp.content:
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(recv_resp.content)} –±–∞–π—Ç")
                    full_response += recv_resp.content
                elif recv_resp.status_code == 204:
		            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–Ω–∞—á–∏—Ç, –≤—Å—ë –ø—Ä–∏—à–ª–æ
                    print("üì≠ recv –≤–µ—Ä–Ω—É–ª 204 ‚Äî –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç")
                    break
                else:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ recv:", recv_resp.text)
                    break

            # 6. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é

            requests.post(f"{API_URL}/session/{session_id}/close")	

            # 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É
            if full_response:
                #self.send_response(200)
                #self.end_headers()
                #self.wfile.write(full_response)
                send_raw_response(self, full_response)
                print(f"üì§ –ë—Ä–∞—É–∑–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(full_response)} –±–∞–π—Ç")
            else:
                self.send_response(502)
                self.end_headers()
                self.wfile.write(b"Empty response from server")

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞:", str(e))
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Proxy error")


    def do_CONNECT(self):
        # 1. –ü–∞—Ä—Å–∏–º host:port –∏–∑ CONNECT
        hostname = self.path.split(":")[0]
        port = int(self.path.split(":")[1])

        print(f"üîê CONNECT: {hostname}:{port}")

        # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
        try:
            open_resp = requests.post( f"{API_URL}/session/open",  json={"host": hostname, "port": port} )
            if open_resp.status_code != 200:
                self.send_response(502)
                self.end_headers()
                return

            session_id = open_resp.json()["session_id"]
            print(f"‚úÖ API-—Å–µ—Å—Å–∏—è: {session_id}")

            # 3. –ì–æ–≤–æ—Ä–∏–º –±—Ä–∞—É–∑–µ—Ä—É: "–≤—Å—ë, —Å–æ–µ–¥–∏–Ω—è–π—Å—è"
            self.send_response(200, "Connection Established")
            self.end_headers()

            # –¢–µ–ø–µ—Ä—å ‚Äî —Ç—É–Ω–Ω–µ–ª—å: –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –±–∞–π—Ç—ã
            # self.connection ‚Äî —ç—Ç–æ —Å–æ–∫–µ—Ç –∫ –±—Ä–∞—É–∑–µ—Ä—É

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–µ –Ω–∏—Ç–∏
            t1 = threading.Thread(target=self.tunnel_browser_to_api, args=(self.connection, session_id), daemon=True)
            t2 = threading.Thread(target=self.tunnel_api_to_browser, args=(self.connection, session_id), daemon=True)
            t1.start()
            t2.start()
            t1.join()
            t2.join()

        except Exception as e:
            print("‚ùå CONNECT –æ—à–∏–±–∫–∞:", e)
            self.send_response(500)
            self.end_headers()


server = HTTPServer( ("127.0.0.1", 8080),  ProxyHandler)
print("–ü—Ä–æ–∫—Å–∏ —Å–ª—É—à–∞–µ—Ç –Ω–∞ 127.0.0.1:8080")
server.serve_forever()